#import "common.view"

widget(container_y, {

	widget(container_y, {
		padding: 1em;

		#include "media_header.view"

		widget(dummy, {
			height: 1em;
		});

		widget(container_x, {
			widget(container_y, {
				widget(container_x, {
					widget(container_y, {
						.width = $ui.width * 0.25;

						POSTER($self.model.metadata.poster, 15em);
					});

					widget(container_y, {
						padding: 1em;
						.width = $ui.width * 0.45;

						spacing: 0.5em;

						widget(container_x, {
							height: 6em;
							spacing: 1em;
							hidden: !($self.model.metadata.rt.images ||
												$self.model.metadata.metacritic ||
												$self.model.metadata.trakt.rating);

							RATING(translate($self.model.metadata.rt.image, "img/rt_fresh.png",
															 "certified", "img/rt_certified.png",
															 "fresh", "img/rt_fresh.png",
															 "rotten", "img/rt_rotten.png"),
										 $self.model.metadata.rt.criticsMeter);

							RATING("img/metacritic.png", $self.model.metadata.metacritic);

							RATING("img/trakt.png", $self.model.metadata.trakt.rating);
						});

						LABEL("First Aired:", $self.model.metadata.firstAired);
						LABEL("Year:", $self.model.metadata.year);
						LABEL("Director:", $self.model.metadata.director);
						LABEL("Released:", $self.model.metadata.released);
						LABEL("Runtime:", $self.model.metadata.runtime);
						LABEL("Genre:", $self.model.metadata.genre);
						LABEL("Certification:", $self.model.metadata.certification);

						//TEXT($self.model.metadata.description, justified);
					});
				});
			});

			// others
			widget(container_y, {
				//height: $ui.height;

				cloner($self.model.nodes, container_z, {
					ACTION_ROW($self.metadata.title,
						select($self.metadata.icon, $self.metadata.icon, "img/pencil.png"),
						translate($self.type, navOpen($self.url),
											"action", deliverEvent($self.eventSink)),
						false);
				});
			});
		});
	});

	widget(list_x, {
		padding: [1em, 0, 1em, 1em];
		spacing: 1em;

		cloner($self.model.metadata.episodes, container_z, {
			EPISODE_ITEM($self.title, $self.subtitle, $self.screenshot, ($self.watched), navOpen($self.url));
		});
	});
});
